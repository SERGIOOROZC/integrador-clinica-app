// src/controllers/usuario.controller.js
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import { SECRET } from "../middleware/auth.js";
import { crearUsuarioModel, listarUsuariosModel, obtenerUsuarioPorEmail } from "../models/usuario.models.js";

// üîπ LISTAR USUARIOS (solo para admin)
export const listarUsuarios = async (req, res) => {
  try {
    const usuarios = await listarUsuariosModel();
    res.json({
      mensaje: "Lista de usuarios obtenida correctamente",
      usuarios,
    });
  } catch (error) {
    console.error("Error al listar usuarios:", error);
    res.status(500).json({ error: "Error al listar usuarios" });
  }
};

// üîπ CREAR USUARIO (Registro desde SignUp.jsx)
export const crearUsuario = async (req, res) => {
  try {
    // üí° AJUSTE CLAVE: Asignamos 'null' por defecto a id_especialidad 
    // y manejamos los dem√°s campos. Esto evita el error 400 cuando un usuario
    // normal se registra (ya que no env√≠a id_especialidad).
    const { 
      nombre, 
      apellido, 
      email, 
      password, 
      rol, 
      id_especialidad = null 
    } = req.body;

    // 1Ô∏è‚É£ Verificar si el email ya existe
    const existing = await obtenerUsuarioPorEmail(email);
    if (existing) return res.status(400).json({ error: "El email ya est√° registrado" });

    // 2Ô∏è‚É£ Encriptar contrase√±a
    const hashedPassword = await bcrypt.hash(password, 10);

    // 3Ô∏è‚É£ Crear usuario usando el modelo
    const usuarioCreado = await crearUsuarioModel({
      nombre,
      apellido,
      email,
      password: hashedPassword,
      rol,
      id_especialidad, // Si fue nulo en req.body, se env√≠a null al modelo.
    });

    // 4Ô∏è‚É£ Mensaje seg√∫n rol
    res.status(201).json({
      mensaje: rol === "medico" ? "M√©dico registrado exitosamente" : "Usuario creado exitosamente",
      usuario: usuarioCreado,
    });

  } catch (error) {
    console.error("Error al crear usuario:", error);
    res.status(500).json({ error: "Error al crear usuario" });
  }
};

// üîë LOGIN DE USUARIO (SignIn.jsx)
export const loginUsuario = async (req, res) => {
  try {
    const { email, password } = req.body;

    // 1Ô∏è‚É£ Buscar usuario por email
    const usuario = await obtenerUsuarioPorEmail(email);
    if (!usuario) return res.status(401).json({ error: "Credenciales inv√°lidas" });

    // 2Ô∏è‚É£ Verificar contrase√±a
    const esValida = await bcrypt.compare(password, usuario.password);
    if (!esValida) return res.status(401).json({ error: "Credenciales inv√°lidas" });

    // 3Ô∏è‚É£ Generar token JWT
    const token = jwt.sign(
      { id: usuario.id_usuario, rol: usuario.rol },
      SECRET,
      { expiresIn: "1h" }
    );

    // 4Ô∏è‚É£ Respuesta al frontend
    res.json({
      mensaje: "Login exitoso",
      token,
      usuario: {
        id: usuario.id_usuario,
        nombre: usuario.nombre,
        apellido: usuario.apellido,
        email: usuario.email,
        rol: usuario.rol,
      },
    });

  } catch (error) {
    console.error("Error en login:", error);
    res.status(500).json({ error: "Error en el login" });
  }
};