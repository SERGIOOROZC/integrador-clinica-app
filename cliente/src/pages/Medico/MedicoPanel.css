import React, { useState } from "react";
import { useNavigate } from "react-router-dom"; // ‚¨ÖÔ∏è Nuevo: Importamos para redirecci√≥n limpia
import "./SignIn.css";

// üí° Nota: Aseg√∫rate de que 'setUser' actualice tu AuthContext o estado global
function SignIn({ setUser }) { 
    
    // 1. Inicializamos useNavigate
    const navigate = useNavigate();
    
    // Estado para guardar email y password
    const [formData, setFormData] = useState({
        email: "",
        password: "",
    });

    // Actualiza el estado cuando el usuario escribe
    const handleChange = (e) => {
        setFormData({
            ...formData,
            [e.target.name]: e.target.value,
        });
    };

    // Se ejecuta al presionar el bot√≥n "Login"
    const handleSubmit = async (e) => {
        e.preventDefault(); 
        console.log("Intentando Login:", formData);

        try {
            // Petici√≥n POST al backend (Usamos la URL corregida: http://localhost:3000/usuario/login)
            const response = await fetch("http://localhost:3000/usuario/login", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(formData),
            });

            const data = await response.json(); 
            console.log("Datos recibidos del servidor:", data);

            if (response.ok) {
                alert("‚úÖ Login exitoso");

                // üîë CR√çTICO: Guarda el token en SESSION STORAGE (coincidiendo con apiServices.js)
                if (data.token) {
                    sessionStorage.setItem("token", data.token);
                }
                
                // 2. Guardamos el usuario globalmente
                // Asumiendo que el backend env√≠a data.usuario, no data.user
                // Si tu backend env√≠a 'user', cambia data.usuario por data.user
                const usuarioData = data.usuario || data.user; 
                
                if (usuarioData) {
                    setUser(usuarioData);

                    // 3. Redirigimos usando navigate() seg√∫n el rol
                    if (usuarioData.rol === "admin") navigate("/admin");
                    else if (usuarioData.rol === "medico") navigate("/medico");
                    else navigate("/reservar"); // ‚¨ÖÔ∏è Redirecci√≥n de paciente
                } else {
                    throw new Error("Respuesta del servidor incompleta (falta usuario/rol).");
                }

            } else {
                // Si login incorrecto (401, 403)
                alert("‚ùå Usuario o contrase√±a incorrectos. Mensaje: " + (data.mensaje || data.error));
                console.error("Error de login:", data);
            }
        } catch (error) {
            console.error("Error en la conexi√≥n o proceso de login:", error);
            // Si el error es una falla de red (cors, servidor ca√≠do), se captura aqu√≠.
            alert("‚ö†Ô∏è No se pudo conectar con el servidor. Verifica que el backend est√© activo.");
        }
    };

    return (
        <div className="signin-container">
            <h2>Bienvenido de nuevo</h2>
            <form onSubmit={handleSubmit} className="signin-form">
                <input
                    type="email"
                    name="email"
                    placeholder="Ingrese su email"
                    value={formData.email}
                    onChange={handleChange}
                    required
                />

                <input
                    type="password"
                    name="password"
                    placeholder="Ingrese su password"
                    value={formData.password}
                    onChange={handleChange}
                    required
                />

                <button type="submit">Login</button>
            </form>

            <p className="signup-link">
                No tienes una cuenta? <a href="/signup">Registrate</a>
            </p>
        </div>
    );
}

export default SignIn;